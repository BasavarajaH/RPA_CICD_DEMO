# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  - group: Pipeline_YAML_Variables

parameters:
- name: ITG
  default: true
  type: boolean
  displayName: If package needs to upload to in ITG environment make the default value true

- name: ProcessName
  type: string
  default: 'RPA_CICD_DEMO'
  displayName: Name of the process from Project json file

- name: DevOrchestratorConnectionString
  type: string
  default: 'Azure_Connection_to_Orchestrator-Test_GitHub_Pipeline'
  displayName: Name of the Dev orchestrator Connection String

- name: ITGOrchestratorConnectionString
  type: string
  default: 'Azure_Connection_to_ITG_Finance_Tenant-Test_GitHub_Pipeline'
  displayName: Name of the ITG orchestrator Connection String

- name: DevOrchestratorFolderName
  type: string
  default: 'Finance'
  displayName: Name the Folder where package needs to be deployed DEV environment

- name: ITGOrchestratorFolderName
  type: string
  default: 'Finance'
  displayName: Name the package  where package needs to be deployed in ITG environment

stages:

  - stage: Build
    displayName: Build Package
    jobs: 
    - job: BuildPackage
      pool: Default
      steps:
      - task: UiPathPack@2
        inputs:
          versionType: 'ManualVersion'
          version: '$(Build.BuildNumber)'

          projectJsonPath: '$(Build.SourcesDirectory)'
          outputType: 'Process'
          orchestratorConnection: '${{ parameters.DevOrchestratorConnectionString }}'
          outputPath: '$(Build.ArtifactStagingDirectory)'
      - publish: '$(Build.ArtifactStagingDirectory)'
        artifact: drop



  - stage: WorkflowAnalyser
    displayName: RunWorkflow Analyser
    dependsOn: Build
    condition: succeeded()
    jobs:
        - job: WorkflowAnalyser
          displayName: AnalyseProject Using Workflow Cli
          pool: Default
          steps:
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                # Write your PowerShell commands here.
                
                param (
                    $ProjectFilePath="$(Build.SourcesDirectory)\project.json",
                    $ExecutableFilePath="$(WA_ExecutableFilePath)",
                    $OutputFilePath="$(Pipeline.Workspace)\drop\${{ parameters.ProcessName }}_$(Build.BuildNumber)_Workflow-Analysis.json"
                    )
                
                Write-Output "$(Get-Date -Format 'HH:mm:ss') - STARTED - Workflow Analyzer CLI Script"
                
                $Command = "$ExecutableFilePath analyze -p $ProjectFilePath"
                Invoke-Expression $Command | Out-File -FilePath $OutputFilePath


  - stage: DeploytoDEV 
    displayName: Deploy  Package to DEV environment
    dependsOn: WorkflowAnalyser
    condition: succeededOrFailed()
    jobs:
      - deployment: deployDEV
        displayName: Deploy package to DEV Orchestrator
        pool: Default
        environment: DEV
        strategy:
         runOnce:
          deploy:
           steps:
            - task: UiPathDeploy@2
              inputs:
                 orchestratorConnection: '${{ parameters.DevOrchestratorConnectionString }}'
                 packagesPath: '$(Pipeline.Workspace)\drop\${{ parameters.ProcessName }}.$(Build.BuildNumber).0.nupkg'
                 folderName: '${{ parameters.DevOrchestratorFolderName }}'
                 entryPoints: 'Main.xaml'


  - stage: AssetInDEV 
    displayName: Create Assests In DEV
    dependsOn: DeploytoDEV
    condition: succeeded()
    jobs:
      - job: CreateAssestsInDEV
        pool: Default
        steps:
        - task: UiPathAssets@2
          inputs:
            orchestratorConnection: '${{ parameters.DevOrchestratorConnectionString }}'
            folderName: '${{ parameters.DevOrchestratorFolderName }}'
            assetActionType: 'Deploy'
            csvFile: '$(Asset_File_Path)'
            



  - stage: AssetInITG
    displayName: Create Assests In ITG
    dependsOn: deployInITG
    condition: succeeded()
    jobs:
      - job: CreateAssestsInITG
        pool: Default
        steps:
        - task: UiPathAssets@2
          inputs:
            orchestratorConnection: '${{ parameters.ITGOrchestratorConnectionString }}'
            folderName: ${{ parameters.ITGOrchestratorFolderName }}
            assetActionType: 'Deploy'
            csvFile: '$(Asset_File_Path)'



  - stage: CopyFiles
    displayName: copy build artifact
    dependsOn: AssetInITG
    condition: succeeded()
    jobs:
     - job: CopyPackage
       pool: Default
       steps:
         - task: CopyFiles@2
           inputs:
            SourceFolder: '$(Pipeline.Workspace)\drop\'
            Contents: '${{ parameters.ProcessName }}.$(Build.BuildNumber).0.nupkg'
            TargetFolder: '$(Package_Repo_Folder)'
            OverWrite: true

  - stage: DeleteOldPackages
    displayName: delete old build artifact
    dependsOn: CopyFiles
    condition: succeeded()
    jobs:
     - job: DeletePackage
       pool: Default
       steps:
         - task: DeleteFiles@1
           inputs:
            SourceFolder: '$(Pipeline.Workspace)\drop\'
            Contents: '${{ parameters.ProcessName }}.$(Build.BuildNumber).0.nupkg'


